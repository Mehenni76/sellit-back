package sogeti.cir.fsn.api.controller.rest;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import sogeti.cir.fsn.api.neo4j.service.AbstractService;
import sogeti.cir.fsn.api.neo4j.service.FsnServiceException;
import sogeti.cir.fsn.api.neo4j.service.IllegalOperationException;
import sogeti.cir.fsn.api.neo4j.service.NotValidObjectException;
import sogeti.cir.fsn.api.neo4j.service.ResourceNotFoundException;
import sogeti.cir.fsn.model.neo4j.NeoModel;

public class AbstractRestController<T extends MySQLModel> {

	protected final Logger log = LoggerFactory.getLogger(getClass());
	protected AbstractService<T> service;

	public AbstractRestController(AbstractService<T> service) {
		this.service = service;
	}

    @GetMapping
    public Page<T> findAllByPage(Pageable page) {
        return service.findAllByPage(page);
 }

	@GetMapping("/{id}")
	public ResponseEntity<T> getOne(@PathVariable(required = true) Long id) {
		T result;
		try {
			result = service.findOne(id);
		} catch (ResourceNotFoundException e) {
			return new ResponseEntity<T>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity(result,HttpStatus.OK);
	}

	@PutMapping("/{id}")
	public ResponseEntity<T> update(@RequestBody(required = true) T objet, @PathVariable(required = true) Long id) {
		T saved;
		try {
			Assert.notNull(objet, "Ne peut pas être null.");
			Assert.notNull(objet.getId(), "L'identifiant ne peut être null");
			Assert.isTrue(id.equals(objet.getId()), "L'id de l'url ne correspond pas à celui de l'objet envoyé.");
			Assert.isTrue(objet.getProtege() == null || !objet.getProtege(), "(" + objet.getLabel() + ") est protégé !");
		
			saved = service.save(objet);
		}catch(ResourceNotFoundException e) {
			return new ResponseEntity<T>(HttpStatus.NOT_FOUND);
		}catch(NotValidObjectException e) {
			return new ResponseEntity<T>(HttpStatus.BAD_REQUEST);
		}catch(IllegalArgumentException e) {
			return new ResponseEntity<T>(HttpStatus.BAD_REQUEST);
		}
		return new ResponseEntity<T>(saved,HttpStatus.OK);
	}
	
	@PostMapping
	public ResponseEntity<T> create(@RequestBody(required = true) T objet){
		T obj;
		try {
			Assert.isNull(objet.getId(), "L'identifiant doit être null");
			Assert.notNull(objet, "Ne peut pas être null.");
			Assert.isTrue(objet.getProtege() == null || !objet.getProtege(), "(" + objet.getLabel() + ") est protégé !");
		
			obj = service.save(objet);
		} catch (NotValidObjectException e) {
			return new ResponseEntity<T>(HttpStatus.BAD_REQUEST);
		} catch (ResourceNotFoundException e) {
			return new ResponseEntity<T>(HttpStatus.FORBIDDEN);
		}catch(IllegalArgumentException e) {
			return new ResponseEntity<T>(HttpStatus.BAD_REQUEST);
		}
		return new ResponseEntity<T>(obj, HttpStatus.CREATED);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity delete(@PathVariable(required = true) Long id) throws FsnServiceException {
		try {
			service.delete(id);
		} catch (ResourceNotFoundException e) {
			return new ResponseEntity<T>(HttpStatus.NOT_FOUND);
		} catch (IllegalOperationException e) {
			return new ResponseEntity<T>(HttpStatus.FORBIDDEN);
		}
		return new ResponseEntity(HttpStatus.OK);
	}


	public AbstractService<T> getService() {
		return service;
	}
}
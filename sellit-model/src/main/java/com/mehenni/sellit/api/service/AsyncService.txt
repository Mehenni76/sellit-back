package sogeti.cir.fsn.api.service;

import java.util.List;
import java.util.Map;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import sogeti.cir.fsn.api.neo4j.dao.AbstractDao;
import sogeti.cir.fsn.model.neo4j.NeoModel;

@Service
public class AsyncService {

	protected final Logger log = LoggerFactory.getLogger(getClass());

	@Async
	public <T extends NeoModel> Map<String, Iterable<T>> executeCorrection(AbstractDao<T> dao, Predicate<? super T> predicate) {
		log.info("DÃ©but de correction.");
		List<T> liste = Lists.newArrayList(dao.findAll());
		Map<String, Iterable<T>> map = Maps.newHashMap();
		map.put("Correction", dao.save(liste.stream().filter(predicate).collect(Collectors.toList())));
		log.info("Fin de correction.");
		return map;
	}
}